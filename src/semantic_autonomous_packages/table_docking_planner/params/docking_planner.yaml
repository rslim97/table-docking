globalNavfnROS:
  allow_unknown: False # Specifies whether or not to allow navfn to create plans that traverse unknown space.
  planner_window_x: 0.5
  planner_window_y: 0.5
  default_tolerance: 0.0 # A tolerance on the goal point for the planner.

localTebPlanner:
 odom_topic: /odometry/filtered
 map_frame: /map
    
 # Trajectory
  
 teb_autosize: True
 dt_ref: 0.3 #0.3 0.45
 dt_hysteresis: 0.05
 global_plan_overwrite_orientation: True
 global_plan_viapoint_sep: 1.0 #small values to prevent obstacle avoidance (0.2), high values to allow avoidance (2.0)
 max_global_plan_lookahead_dist: 1.5 #2
 via_points_ordered: True
 feasibility_check_no_poses: 2.0 #3
 shrink_horizon_backup: True
 shrink_horizon_min_duration: 20.0
 oscillation_recovery_min_duration: 180.0 #increase timeout for oscillation action to prevent oscillations. Not sure how this will affect if zig-zag paths are required
 publish_feedback: false

 # Robot
         
 max_vel_x: 0.3
 max_vel_x_backwards: 0.2
 max_vel_theta: 0.3
 acc_lim_x: 0.3
 acc_lim_theta: 0.3
 min_turning_radius: 0.0
 is_footprint_dynamic: True
 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
   type: "polygon"
   radius: 0.6 # for type "circular"
   line_start: [0.2, 0.0] # for type "line"
   line_end: [-0.5, 0.0] # for type "line", min obstacle_dist = 0.35
   front_offset: 0.1 # for type "two_circles"
   front_radius: 0.3 # for type "two_circles"
   rear_offset: 0.45 # for type "two_circles", ,min_obstacle_dist = 0.1
   rear_radius: 0.3 # for type "two_circles"
   vertices: [ [-0.6, -0.25], [-0.6, 0.25], [0.2, 0.25], [0.2, -0.25] ] # for type "polygon"

 # GoalTolerance
    
 xy_goal_tolerance: 0.1
 yaw_goal_tolerance: 5.0
 free_goal_vel: False
    
 # Obstacles
    
 min_obstacle_dist: 0.2 #0.5 0.4
 include_costmap_obstacles: True #true false
 include_dynamic_obstacles: False
 costmap_obstacles_behind_robot_dist: 1.0
 obstacle_poses_affected: 35
 inflation_dist: 0.5

 # Ocptimization
    
 no_inner_iterations: 4
 no_outer_iterations: 4
 optimization_activate: True
 optimization_verbose: False
 penalty_epsilon: 0.1
 weight_max_vel_x: 2.0
 weight_max_vel_theta: 1.0
 weight_acc_lim_x: 1.0
 weight_acc_lim_theta: 1.0
 weight_kinematics_nh: 1000
 weight_kinematics_forward_drive: 1
 weight_kinematics_turning_radius: 1
 weight_viapoint: 1.0 #10.0
 weight_adapt_factor: 2.0
 weight_optimaltime: 10.0
 weight_obstacle: 50.0 #50
 weight_dynamic_obstacle: 0.5 
 weight_inflation: 1.0
 selection_alternative_time_cost: False # not in use yet

 # Homotopy Class Planner

 enable_homotopy_class_planning: True
 enable_multithreading: True
 simple_exploration: False
 max_number_classes: 3
 selection_cost_hysteresis: 1.0
 roadmap_graph_no_samples: 15
 roadmap_graph_area_width: 8
 h_signature_prescaler: 1.0
 h_signature_threshold: 0.1
 obstacle_heading_threshold: 0.7 #reducing this will increase the "cone" infront of robot in which alternate trajectories are considered. Lower values allow larger obstacles to be bypassed, but higher computation. Max 1.0
 visualize_hc_graph: False
 switching_blocking_period: 0.0 #reduce oscillations, decreases responsiveness to obstacle
 force_reinit_new_goal_dist: 1.0
 ## Costmap converter plugin   
#  costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
 #costmap_converter_plugin: ""
 
 #Lines inside of obstacles, not a 100% representation, similar performance to PolygonsDBSMCCH, maybe slightly slower
 #costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSRANSAC"
 
 #Performance worse than the 2 above, with default parameters. Converted lines are very fine dots or short lines
 #costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSMCCH"
  
 ## Costmap converter plugin   
 #Similar performance to first plugin
#  costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSMCCH"
 costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSMCCH"
 costmap_converter_spin_thread: True
 costmap_converter_rate: 3
 
 
 ## Configure plug ins (namespace move_base/CostmapToDynamicObstacles)
#  costmap_converter/CostmapToPolygonDBSConcaveHull:
#    cluster_max_distance: 0.2
#    cluster_min_pts: 2
#    cluster_max_pts: 200
#    concave_hull_depth: 5.0
 
 costmap_converter/CostmapToLinesDBSMCCH:
    cluster_max_distance: 0.2
    cluster_min_pts: 5
    cluster_max_pts: 50
    convex_hull_min_pt_separation: 0
    support_pts_max_dist: 0.1
    suppirt_pts_max_dist_inbetween: 0.5
    min_support_pts: 10

 costmap_converter/CostmapToPolygonDBSMCCH:
   cluster_max_distance: 0.00
   cluster_min_pts: 2
   cluster_max_pts: 4
   convex_hull_min_pt_separation: 0

 costmap_converter/CostmapToDynamicObstacles:
   alpha_slow: 0.3
   alpha_fast: 0.85
   beta: 0.85
   min_sep_between_slow_and_fast_filter: 80
   min_occupancy_probability: 180
   max_occupancy_neighbors: 100
   morph_size: 1
   filter_by_area: True
   min_area: 3
   max_area: 300
   filter_by_circularity: True
   min_circularity: 0.2
   max_circularity: 1.0
   filter_by_inertia: True
   min_intertia_ratio: 0.2
   max_inertia_ratio: 1.0
   filter_by_convexity: False
   min_convexity: 0.0
   max_convexity: 1.0
   dt: 0.2
   dist_thresh: 60.0
   max_allowed_skipped_frames: 3
   max_trace_length: 10
   static_converter_plugin: "costmap_converter::CostmapToPolygonsDBSConcaveHull"